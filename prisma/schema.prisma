// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tweet {
  id             String   @id @default(uuid())
  content        String
  likes          Int      @default(autoincrement()) //inutilzado e redundante
  createdAt      DateTime @default(now())
  replyToTweetId String?
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  likeList       Like[]
}

model Like {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  tweetId   String
  tweet     Tweet    @relation(fields: [tweetId], references: [id])
  createdAt DateTime @default(now())
}

// Next Auth

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String            @id @default(cuid())
  name          String?
  email         String?           @unique
  emailVerified DateTime?
  image         String?
  follower      Follower?
  tweets        Tweet[]
  accounts      Account[]
  sessions      Session[]
  likes         Like[]
  followers     FollowersOnUser[]
}

model FollowersOnUser {
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  followerId String
  follower   Follower @relation(fields: [followerId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())

  @@id([userId, followerId])
}

model Follower {
  id        String            @id @default(cuid())
  userId    String            @unique
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  followers FollowersOnUser[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
